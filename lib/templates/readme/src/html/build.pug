extends ./_layout.pug

block variables
  - var title = "SSSG - Build"
  - var webRoot = ".."

block body
  #main(data-page="dev")
    #sidebar-area
      include _sidebar.pug
    #content-area
      #content.build-mechanism
        h1.title
          | Build Mechanism

        .build-image.overview
          img.clickable-img(src=webRoot + "/image/build-image.png")

        p.
          #[b.red-bold Red bold folders/files] ... Fixed name folders/files required for build#[br]
          #[span.grayed-thin Grayed thin folders/files] ... User defined folders/files optional for build

        p.
          The picture above depicts how source files are built into output folder.
          #[br]
          Only red bold folders/files are recognized as build target. Thin grayed folders/files
          will be ignored if they are not referred to by the red bold source files.

        p.
          #[code.inline src/] and #[code.inline docs/] are customizable via --src/--dst options.#[br]
          For all available options on build, please check out #[a(href="./usage.html#sssg-build") Usage]

        p.
          Build process varies depending on content type such as html/css/javascript/others.#[br]
          If you want to go deep as to how SSSG works, please check the source hosted in
          #[a(href="https://github.com/Hinaser/sssg") GitHub].

        h2 Building Stylus for CSS
        .build-image.css
          img.clickable-img(src=webRoot + "/image/build-css.png")
        p.
          SSSG build #[code.inline src/css/main.styl] into #[code.inline docs/css/main.css].#[br]
          All library files in #[code.inline src/css/lib/], in the above example,
          #[code.inline bootstrap.css] and #[code.inline font-awesome.css] will be just merged into
          #[code.inline docs/css/lib.css].

        p.
          You can modularize stylus files by utilizing #[code.inline @import] statement. In the example above,
          #[code.inline main.styl] imports #[code.inline aaa.styl]. You can break a file into pieces based on
          pages.#[br]
          All files except for #[code.inline main.styl] and the lib files will be ignored
          unless they are #[code.inline @import]ed by #[code.inline main.styl].

        p.
          In #[code.inline sssg serve] command, build frequencies of #[code.inline main.css] and #[code.inline lib.css] should be noted carefully.#[br]
          While #[code.inline main.css] is dynamically and frequently updated as you edit source stylus files,
          #[code.inline lib.css] is only compiled/updated once #[code.inline sssg serve] launches.#[br]
          So in case you want to add library files, you need to restart #[code.inline sssg serve].

        h2 Building ES6 Javascript for Browser compatible ES5 Javascript
        .build-image.js
          img.clickable-img(src=webRoot + "/image/build-js.png")
        p.
          Building javascript is very similar to building css. Other than file extension and folder name,
          I can say they are almost the same.

        p.
          SSSG build #[code.inline src/js/main.js] into #[code.inline docs/js/main.js].#[br]
          Although file extension does not change, its content transforms from es6 into
          es5, which most modern(~2017) browsers support.
          All library files in #[code.inline src/js/lib/], in the above example,
          #[code.inline jquery.js] and #[code.inline bootstrap.js] will be just merged into
          #[code.inline docs/js/lib.js].

        h3 .babelrc
        p.
          SSSG is equipped with babel.
          You can put your original .babelrc just under #[code.inline src/js/]
          so that you use any babel presets/plugins you want.#[br]
          By .babelrc, for example you can write code in ReactJS(JSX) syntax.

        h4.
          Example for ReactJS

        p Move to work folder
        code.
          $ cd [some empty folder]

        p.
          Install ReactJS(react, react-dom) and babel presets.
        code.
          $ npm init -y #[br]
          $ npm install --save-dev react react-dom#[br]
          $ npm install --save-dev babel-preset-react babel-preset-env#[br]

        p Initialize SSSG
        code.
          $ sssg init

        p Create #[code.inline src/js/.babelrc] activating react plugins
        pre.file-sample
          | {
          |   "presets": ["react", "env"]
          | }

        p.
          From here you can write ReactJS code. If you want code samples,
          Check #[a(href='https://github.com/Hinaser/sssg/tree/master/lib/templates/react/' target='_blank') THIS] out.

        h3 import from node_modues
        p.
          #[code.inline import] statement works against global/local npm modules.#[br]
          If you installed SSSG as a local npm module, you can #[code.inline import] modules
          in #[code.inline node_modules] folder.

        p.
          Though importing from npm_modules is helpful, it is not recommended because it imports
          npm module into #[code.inline main.js], not #[code.inline lib.js].#[br]
          As well as building stylus, in #[code.inline sssg serve] command, #[code.inline main.js] is dynamically updated and
          #[code.inline lib.js] is just compiled once.

        p.
          It is recommended to put static library files into #[code.inline src/js/lib/] folder to avoid
          building overhead.

        h3.
          incremental build in #[code.inline sssg serve]
        p.
          SSSG adopts #[code.inline watchify], which only compiles modified javascript files
          in dependency tree.#[br]
          As unmodified files are cached and not re-compiled at build time, building speed becomes
          incredibly fast!#[br]


        h2 Building Pug for HTML
        .build-image.html
          img.clickable-img(src=webRoot + "/image/build-html.png")
        p.
          Building pug is different to previous ones.#[br]
          For building stylus and es6, only #[code.inline main.styl]/#[code.inline main.js] or library files are compiled.#[br]
          For pug, all pug files except for partial pug files under #[code.inline src/html] folder will be compiled.

        p.
          Please note that #[code.inline src/html/index.pug] and other pug files are build in different process.#[br]
          Detailed reason about this is described in #[a(href="https://github.com/Hinaser/sssg/blob/master/gulp/config.js", target="_blank") source code].

        h3 partial pug files
        p.
          A pug file is recognized as partial if :#[br]
          - its filename ends with ".part.pug" (i.e. layout.part.pug)#[br]
          - its filename starts with "_" (i.e. _layout.pug)#[br]
          - its parent folder name starts with "_" (i.e. _common/layout.pug)

        p.
          These partial pug files will be ignored unless they are #[code.inline extended] or
          #[code.inline included] by normal pug files.#[br]
          You can use this to write sharable html components or store pug variables/mixins.

        h3 src/html/index.pug
        p.
          It is compiled into #[code.inline docs/index.html] by default.#[br]
          The location of #[code.inline index.html] can be specified via #[code.inline --root|-r] option.

        p.
          You should be careful to specify local resource(js/css/image) path in the pug file.#[br]
          When you write
          #[code.inline &lt;script src="..."&gt;] or #[code.inline &lt;link href="..."&gt;] or
          #[code.inline &lt;img src="..."&gt;] or so, ALWAYS specify its path relative to
          the actual path where #[code.inline index.html] will be compiled into.

        h3 other .pug files
        p.
          Unlike the #[code.inline index.pug], all .pug files except for partial pug files will be compiled into
          #[code.inline docs/contents/].#[br]
          Folders you create under #[code.inline src/html/] will be preserved and created under the
          #[code.inline docs/contents] folder.

        p.
          Like the #[code.inline index.pug], local resource path should be carefully specified.#[br]
          Resource path should be relative to the path where there .pug files will be compiled into.

        h3 incremental build in #[code.inline sssg serve]
        p.
          Building html goes incremental, meaning only modified file and files referencing the modified file
          will be compiled.#[br]
          How this is achieved is bit tricky. First, when you edit any pug file in #[code.inline src/html] folder,
          all html file in output folder will be deleted.
          After this deletion completes, http server in SSSG will send a signal to your browser to reload current page.
          When your html request comes to http server by reloading signal, there are no html files yet
          because they are all deleted.
          Now here is a trick. Http server in SSSG tries to compile only a pug file corresponding to requested html
          and returns it to you.
        p.
          This greatly improves building speed for responsive previewing. In general, building time get longer as
          pug files grows. If there are tens of pug files, building time would be over 10 seconds.#[br]
          But with this build mechanism, building time would be 10 - 100 times faster because html files not requested
          yet won't be compiled until you requests it.

        h3 Don't forget to rebuild after developing by #[code.inline sssg serve] has done.
        p.
          Since build mechanism for html/pug is bit abnormal, please take a deep breath before publishing your
          files generated in #[code.inline docs/].#[br]
          As html files in #[code.inline docs/contents, docs/index.html] might be deleted by last edit,
          you should always #[code.inline sssg rebuild] before porting files in #[code.inline docs/] to anywhere.

        p.
          This is not so comfortable I know. It's trade-off with build performance. I think developing speed matters
          than making an effort not to forget #[code.inline sssg rebuild].

        h2 Building Image/Misc files
        p.
          Image files in #[code.inline src/image/] and misc files in #[code.inline src/misc/] will be
          just copied into #[code.inline docs/image] and #[code.inline docs/misc].